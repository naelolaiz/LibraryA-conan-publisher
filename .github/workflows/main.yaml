name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

#env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  #  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release, Debug]

    steps:
    - uses: actions/checkout@v2
    
    - name: Display platform information on python
      run: |
        import platform
        print(platform.uname())
      shell: python
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ${{github.workspace}}/Library

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.build_type }}

    - name: Package
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.build_type }} --target package
      
    - name: Create multiplatform artifact for github
      uses: actions/upload-artifact@v3
      with:
        name: my-artifact-multiplatform
        path: ${{github.workspace}}/build/Library-*
    - name: Create per-platform artifacts for github
      uses: actions/upload-artifact@v3
      with:
        name: my-artifact-multiplatform-${{ matrix.os }}
        path: ${{github.workspace}}/build/Library-*
        
        
    - uses: jfrog/setup-jfrog-cli@v2
      env:
        JF_ENV_1: ${{ secrets.JF_SECRET_ENV_1 }}
    - name: Artifactory generic
      working-directory: ${{github.workspace}}/build
      run: |
        # Ping the server
        jf rt ping
        jf rt u "Library-*" default-generic-local/artifacts/${{ github.sha }}/
      
    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main      

    - name: Conan
      working-directory: ${{github.workspace}}/Library
      run: |
        conan new Library/${{ github.sha }} -t -s
        conan install -s build_type=${{ matrix.build_type }} .
        conan create -s build_type=${{ matrix.build_type }} . demo/testing
        conan remote add my-conan-repo ${{ secrets.JF_SECRET_CONAN_REPO_URL }}
        conan user -p ${{ secrets.JF_SECRET_CONAN_API_KEY }} -r my-conan-repo ${{ secrets.JF_SECRET_CONAN_USER }}
        conan upload -r my-conan-repo --all --no-overwrite recipe Library/${{ github.sha }}@demo/testing

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ matrix.build_type }}
